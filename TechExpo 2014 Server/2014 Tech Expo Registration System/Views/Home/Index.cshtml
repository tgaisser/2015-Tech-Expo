@using TechExpo.Data.Models
@using _2014_Tech_Expo_Registration_System.Hubs
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>Index</title>
        <link href="@Url.Content("~/Content/Site.css")" rel="stylesheet" type="text/css" />
        <link href="@Url.Content("~/Content/kendo/2014.1.415/kendo.common.min.css")" rel="stylesheet" type="text/css" />
        <link href="@Url.Content("~/Content/kendo/2014.1.415/kendo.dataviz.min.css")" rel="stylesheet" type="text/css" />
        <link href="@Url.Content("~/Content/kendo/2014.1.415/kendo.moonlight.min.css")" rel="stylesheet" type="text/css" />
        <link href="@Url.Content("~/Content/kendo/2014.1.415/kendo.dataviz.moonlight.min.css")" rel="stylesheet" type="text/css" />
        <script src="@Url.Content("~/Scripts/kendo/2014.1.415/jquery.min.js")"></script>
        <script src="@Url.Content("~/Scripts/kendo/2014.1.415/kendo.all.min.js")"></script>
        <script src="@Url.Content("~/Scripts/kendo/2014.1.415/kendo.aspnetmvc.min.js")"></script>
        <script src="@Url.Content("~/Scripts/kendo.modernizr.custom.js")"></script>
        <!--Script references. -->
        @* <script src="~/Scripts/jquery-1.9.1.min.js"></script>*@
        <!--Reference the SignalR library. -->
        <script src="~/Scripts/jquery.signalR-2.0.3.min.js"></script>
        <!--Reference the autogenerated SignalR hub script. -->
        <script src="~/signalr/hubs"></script>
    </head>
    <body>
        <div>
            <script>
                var hubUrl = "signalr/hubs";
                var connection = $.hubConnection(hubUrl, { useDefaultPath: false });
                var logMessageUpdatesHub = connection.createHubProxy("logMessageUpdatesHub");
                var activityUpdatesHub = connection.createHubProxy("activityUpdatesHub");
        
                // Create a function that the hub can call back to display messages.
                activityUpdatesHub.on("activityUpdate", function(counts) {
                    $('#_lblTotalRegistrants').text(counts.total_registrants);
                    $('#_lblCheckedInRegistrants').text(counts.checked_in_registrants);
                    $('#_lblTotalBoothVisits').text(counts.total_booth_visits);
                });

                var hubStart = connection.start()
                    .done(function() {
                        activityUpdatesHub.invoke("getCurrentCounts");
                    });;

            </script>
            <fieldset>
                <legend>Activity</legend>
                <table>
                    <tr>
                        <td>Total Registrants:</td>
                        <td>
                            <label id="_lblTotalRegistrants">Getting Activity...</label></td>
                        <td>Checked In Registrants:</td>
                        <td>
                            <label id="_lblCheckedInRegistrants">Getting Activity...</label></td>
                        <td>Total Booth Visits:</td>
                        <td>
                            <label id="_lblTotalBoothVisits">Getting Activity...</label></td>
                    </tr>
                    
                </table>
            </fieldset>
            
            <fieldset>
                <legend>Log Messages</legend>
                
                @(Html.Kendo()
                      .Grid<LogMessage>()
                      .Name("_gLogMessages")
                      .Columns(columns =>
                      {
                          columns.Bound(c => c.TimeStamp)
                                 .Hidden();
                          columns.Bound(c => c.Level)
                                 .Width(100);
                          columns.Bound(c => c.Message);
                      })
                      .Scrollable(s => s.Height(500))
                      .Sortable()
                      .DataSource(dataSource => dataSource.SignalR()
                                                          .AutoSync(true)
                                                          .Sort(s => s.Add("TimeStamp")
                                                                      .Descending())
                                                          .Transport(tr => tr.Promise("hubStart")
                                                                             .Hub("logMessageUpdatesHub")
                                                                             .Client(c => c.Read("updateLogMessages")
                                                                                           .Update("updateLogMessages"))
                                                                             .Server(s => s.Read("getAllMessages")
                                                                                           .Update("getAllMessages")))
                                                          .Schema(schema => schema.Model(model =>
                                                          {
                                                              model.Id("Id");
                                                              model.Field("TimeStamp", typeof (DateTime));
                                                              model.Field("Level", typeof (String));
                                                              model.Field("Message", typeof (String));
                                                          })))
                      )

            </fieldset>
        </div>

    </body>
</html>